# ---------------------------------------------------
# Optional authentication configuration options
# ---------------------------------------------------

# ---------------------------------------------------
# LDAP
# ---------------------------------------------------
# Authentication via Lightweight Directory Access Protocol (LDAP) query
# to a directory server (like OpenLDAP slapd, Active Directory Server, etc.).
# Note that this feature requires the "ldap" PHP module which is not checked
# in the standard CollectiveAccess configuration checks.

# Set this to 1 to use LDAP authentication.
use_ldap = 0

# List of usernames who are authenticated locally, i.e. as though `use_ldap` is 0.
ldap_local_users = []

# LDAP protocol version, the default value should normally be used.
ldap_protocol_version = 3

# LDAP server location information.
# For more details see http://php.net/manual/en/function.ldap-connect.php
ldap_host = ldap.mysite.org
ldap_port = 389

# LDAP attribute names.
ldap_attribute_member_of = memberOf
ldap_attribute_membership = memberuid
ldap_attribute_email = mail
ldap_attribute_fname = givenName
ldap_attribute_lname = sn

# RDN to use for the `ldap_bind()` operation; may contain "{username}" which is replaced by the username logging in.
# For more details see http://php.net/manual/en/function.ldap-bind.php
ldap_bind_rdn = uid={username},ou=Users,dc=mysite,dc=org

# DN to use for the `ldap_search()` operation used to find the details / attributes of the user logging in; may contain
# "{username}" which is replaced by the username logging in.
# For more details see http://php.net/manual/en/function.ldap-search.php
ldap_user_search_dn = uid={username},ou=Users,dc=mysite,dc=org

# Filter to use for the `ldap_search()` operation used to find the details / attributes of the user logging in; may
# contain "{username}" which is replaced by the username logging in.
# For more details see http://php.net/manual/en/function.ldap-search.php
ldap_user_search_filter = uid={username}

# Lists of CollectiveAccess role names and group names for newly created users; these are applied only once when the
# user is first authenticated via LDAP and does not exist locally in CollectiveAccess.
ldap_users_default_roles = []
ldap_users_default_groups = []

# CollectiveAccess can match on either a flat list of LDAP group DNs that the user must belong to in order to gain
# access; or on a hash / map containing mappings from a CollectiveAccess group name to LDAP group DN (or multiple LDAP
# group DNs as an array), where the user will gain access to the CollectiveAccess groups corresponding to the LDAP
# groups that they belong to.
ldap_group_match_type = list
ldap_group_dn = []

# Alternatively, in "list" mode, supply a list of CNs for groups, which are converted into search filters using the
# given pattern.
ldap_group_cn = []
ldap_group_filter_pattern = (cn={group_cn})

# Group matching can be done in one of two ways: group-to-user or user-to-group.  The former loads a group by DN and
# looks for the user in its attributes (the attribute name is given by `ldap_attribute_membership`).  The latter takes
# the user's attributes and looks for the group (the attribute name is given by `ldap_attribute_member_of`).
ldap_group_match_method = group-to-user

# DN to use for the `ldap_search()` operation used to find the details / attributes of a given group.  This is ignored
# unless `ldap_group_match_method` is "group-to-user".
# For more details see http://php.net/manual/en/function.ldap-search.php
ldap_group_search_dn = dc=mysite,dc=org

# Whether to update groups and roles on every login (when set to 1) or only on first login (when set to 0, the
# default).  Note this applies to `ldap_users_default_roles` and `ldap_users_default_groups` as well as the
# groups determined from LDAP lookups.
ldap_acl_update_on_every_login = 0

# Automatically activate new users? (otherwise they can't log in)
ldap_users_auto_active = 1


# ---------------------------------------------------
# Authentication using an external database (extdb)
# ---------------------------------------------------
# Note: the values below are defaults. They MUST be changed
# to work with your own external authentication database
#

# Set to 1 to use external authentication
use_extdb = 0

# Login for external auth database
extdb_host = localhost
extdb_username = your_auth_database_login
extdb_password = your_auth_database_password
extdb_database = your_auth_database_name
extdb_db_type = mysql

# The table and fields in the external database to use for authentication
extdb_table = users
extdb_username_field = email
extdb_password_field = password

# How the external database hashes passwords
# 	For plain-text passwords use "none"
# Possible values are: md5, sha1, none
extdb_password_hash_type = md5

# How to determine from the external database if the user is active
#	If all users in the external database are active set extdb_default_active = 1
extdb_default_active = 0
extdb_active_field = status
extdb_active_field_map = {
	Active = 1,
	active = 1,
	Disabled = 0,
	none = 0
}

# How to determine from the external database what the class of user is
# 	possible CA values are none, public and full
#	"public" means Pawtucket (front-end) login only, "full" means both Pawtucket and Providence (back-end)
extdb_access_field = access
extdb_access_field_map = {
	Member = public,
	Staff = full
}
extdb_default_access = none

# Roles granted to login from external database
extdb_roles_field = access
# extdb value = assoc list of CA roles
extdb_roles_field_map = {
	Member = { cataloguer }
}
extdb_default_roles = { }

# Groups granted to login from external database
extdb_groups_field = access
# extdb value = assoc list of CA groups
extdb_groups_field_map = {
	Member = { cataloguers }
}
extdb_default_groups = { cataloguers }

# Fields to copy from external database to newly created CA user record
# 	extdb field = ca_users field
extdb_user_field_map = {
	email = email,
	firstname = fname,
	lastname = lname
}

# Fields to copy from external database to  user preferences in newly created CA user record
# 	extdb field = ca user pref
extdb_user_pref_map = {
	cur_address1 = user_profile_address1,
	cur_address2 = user_profile_address2,
	cur_city = user_profile_city,
	cur_state = user_profile_state,
	cur_country = user_profile_country,
	cur_postal_code = user_profile_postalcode,
	primary_phone = user_profile_phone
}